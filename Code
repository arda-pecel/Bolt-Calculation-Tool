import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import math
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Bolt constants for M6 and M8
bolt_data = {
    "M8": {
        "Dp": 13,
        "dp": 8,
        "ds": 7.78,
        "S": 36.6,
        "P": 1.25,
        "d2": 7.188e-3,
        "tau": 5.530e-2,
        "dk": 1.100e-2,
    },
    "M6": {
        "Dp": 10,
        "dp": 6,
        "ds": 4.77,
        "S": 20.1,
        "P": 1.0,
        "d2": 5.350e-3,
        "tau": 5.943e-2,
        "dk": 8.300e-3,
    },
}

class BoltCalculator:
    def __init__(self, root):
        self.root = root
        self.mode = None
        self.samples = None
        self.angles = []
        self.results = []
        
        self.setup_mode_selection()
        
    def setup_mode_selection(self):
        self.mode_window = tk.Toplevel(self.root)
        self.mode_window.title("Calculation Mode")
        self.mode_window.geometry("300x150")
        
        tk.Label(self.mode_window, text="Select Calculation Mode:").pack(pady=10)
        
        ttk.Button(self.mode_window, text="Single Calculation", 
                 command=lambda: self.set_mode("single")).pack(pady=5)
        ttk.Button(self.mode_window, text="Group Calculation", 
                 command=lambda: self.set_mode("group")).pack(pady=5)
    
    def set_mode(self, mode):
        self.mode = mode
        self.mode_window.destroy()
        self.setup_main_ui()
        
        if mode == "group":
            self.get_sample_count()
    
    def get_sample_count(self):
        self.samples = simpledialog.askinteger("Group Calculation", 
                                             "Enter number of samples:", 
                                             parent=self.root)
        if not self.samples:
            messagebox.showerror("Error", "Invalid sample count")
            return
            
        self.get_angles()
    
    def get_angles(self):
        self.angle_window = tk.Toplevel(self.root)
        self.angle_window.title("Enter Angles")
        
        tk.Label(self.angle_window, text="Enter rotating angles (degrees):").pack(pady=5)
        
        self.angle_entries = []
        for i in range(self.samples):
            frame = tk.Frame(self.angle_window)
            frame.pack(pady=2)
            tk.Label(frame, text=f"Sample {i+1}:").pack(side=tk.LEFT)
            entry = ttk.Entry(frame, width=10)
            entry.pack(side=tk.LEFT)
            self.angle_entries.append(entry)
        
        ttk.Button(self.angle_window, text="Calculate", 
                 command=self.process_group_calculation).pack(pady=10)
    
    def process_group_calculation(self):
        try:
            self.angles = [float(entry.get()) for entry in self.angle_entries]
            if len(self.angles) != self.samples:
                raise ValueError
        except ValueError:
            messagebox.showerror("Error", "Invalid angle values")
            return
            
        self.angle_window.destroy()
        self.perform_group_calculation()
    
    def perform_group_calculation(self):
        try:
            bolt_type = self.bolt_type_var.get()
            L = float(self.length_entry.get())
            M = float(self.torque_entry.get())
            E = float(self.young_modulus_entry.get()) * 1000
        except ValueError:
            messagebox.showerror("Error", "Invalid input values")
            return
            
        bolt = bolt_data[bolt_type]
        self.results = []
        
        for A in self.angles:
            F = calculate_force(A, L, E, bolt)
            mu = calculate_coefficient_of_friction(F, M, bolt)
            self.results.append((A, F, mu))
        
        self.show_graphs()
    
    def show_graphs(self):
        graph_window = tk.Toplevel(self.root)
        graph_window.title("Results Visualization")
        graph_window.geometry("1000x600")
        
        # Create main container
        container = ttk.Frame(graph_window)
        container.pack(fill=tk.BOTH, expand=True)
        
        # Figure for plots
        fig = plt.figure(figsize=(10, 8))
        self.ax1 = fig.add_subplot(211)
        self.ax2 = fig.add_subplot(212)
        
        # Initial plotting with scatter
        self.plot_lines = {'force': None, 'cof': None}  # To track line objects
        self.update_plots(scatter_only=True)
        
        # Canvas for matplotlib
        canvas = FigureCanvasTkAgg(fig, master=container)
        canvas.draw()
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        # Results table
        table_frame = ttk.Frame(container)
        table_frame.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)
        
        # Create treeview
        self.results_table = ttk.Treeview(table_frame, columns=('Angle', 'Force', 'CoF'), show='headings')
        vsb = ttk.Scrollbar(table_frame, orient="vertical", command=self.results_table.yview)
        hsb = ttk.Scrollbar(table_frame, orient="horizontal", command=self.results_table.xview)
        self.results_table.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # Configure columns
        self.results_table.heading('Angle', text='Angle (°)')
        self.results_table.heading('Force', text='Force (N)')
        self.results_table.heading('CoF', text='CoF (μ)')
        
        self.results_table.column('Angle', width=100, anchor='center')
        self.results_table.column('Force', width=100, anchor='center')
        self.results_table.column('CoF', width=100, anchor='center')
        
        # Populate table
        for result in self.results:
            self.results_table.insert('', 'end', values=(
                f"{result[0]:.2f}",
                f"{result[1]:,.2f}".replace(",", " "),
                f"{result[2]:.4f}"
            ))
        
        # Grid layout
        self.results_table.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        # Control buttons
        control_frame = ttk.Frame(container)
        control_frame.grid(row=1, column=0, columnspan=2, pady=10)
        
        ttk.Button(control_frame, text="Toggle Lines", 
                 command=self.toggle_lines).pack(side=tk.LEFT, padx=5)
        
        # Configure grid weights
        container.grid_columnconfigure(0, weight=3)
        container.grid_columnconfigure(1, weight=1)
        container.grid_rowconfigure(0, weight=1)
        
    def update_plots(self, scatter_only=True):
        angles = [r[0] for r in self.results]
        forces = [r[1] for r in self.results]
        cofs = [r[2] for r in self.results]
        
        # Clear previous plots
        self.ax1.clear()
        self.ax2.clear()
        
        # Plot force
        self.ax1.scatter(angles, forces, c='b', label='Pretension Force')
        if not scatter_only and self.plot_lines['force']:
            self.ax1.plot(angles, forces, 'b-', alpha=0.3)
        
        # Plot CoF
        self.ax2.scatter(angles, cofs, c='r', label='Coefficient of Friction')
        if not scatter_only and self.plot_lines['cof']:
            self.ax2.plot(angles, cofs, 'r-', alpha=0.3)
        
        # Set titles and labels
        self.ax1.set_title('Pretension Force vs Rotation Angle')
        self.ax1.set_xlabel('Angle (degrees)')
        self.ax1.set_ylabel('Force (N)')
        self.ax1.grid(True)
        
        self.ax2.set_title('Coefficient of Friction vs Rotation Angle')
        self.ax2.set_xlabel('Angle (degrees)')
        self.ax2.set_ylabel('Coefficient of Friction')
        self.ax2.grid(True)
        
        plt.tight_layout()
    
    def toggle_lines(self):
        # Toggle line visibility
        if self.plot_lines['force'] is None:
            # Add lines
            angles = [r[0] for r in self.results]
            forces = [r[1] for r in self.results]
            cofs = [r[2] for r in self.results]
            
            self.plot_lines['force'], = self.ax1.plot(angles, forces, 'b-', alpha=0.3)
            self.plot_lines['cof'], = self.ax2.plot(angles, cofs, 'r-', alpha=0.3)
        else:
            # Remove lines
            self.plot_lines['force'].remove()
            self.plot_lines['cof'].remove()
            self.plot_lines = {'force': None, 'cof': None}
        
        # Redraw canvas
        self.ax1.figure.canvas.draw()

    def setup_main_ui(self):
        # Main input fields
        main_frame = tk.Frame(self.root)
        main_frame.pack(pady=10)
        
        # Bolt type selection
        self.bolt_type_var = tk.StringVar()
        bolt_frame = tk.Frame(main_frame)
        bolt_frame.pack(pady=5)
        
        tk.Label(bolt_frame, text="Bolt Type:").pack(side=tk.LEFT)
        ttk.Radiobutton(bolt_frame, text="M6", variable=self.bolt_type_var, 
                      value="M6").pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(bolt_frame, text="M8", variable=self.bolt_type_var, 
                      value="M8").pack(side=tk.LEFT, padx=5)
        
        # Common input fields
        input_frame = tk.Frame(main_frame)
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="Bolt Length (L) [mm]:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.length_entry = ttk.Entry(input_frame)
        self.length_entry.grid(row=0, column=1, pady=2)
        
        tk.Label(input_frame, text="Applied Torque (M) [Nm]:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.torque_entry = ttk.Entry(input_frame)
        self.torque_entry.grid(row=1, column=1, pady=2)
        
        tk.Label(input_frame, text="Young's Modulus (E) [GPa]:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.young_modulus_entry = ttk.Entry(input_frame)
        self.young_modulus_entry.grid(row=2, column=1, pady=2)
        
        # Single calculation specific
        if self.mode == "single":
            tk.Label(input_frame, text="Rotating Angle (A) [degrees]:").grid(row=3, column=0, sticky=tk.W, pady=2)
            self.angle_entry = ttk.Entry(input_frame)
            self.angle_entry.grid(row=3, column=1, pady=2)
            
            ttk.Button(main_frame, text="Calculate", 
                     command=self.perform_single_calculation).pack(pady=10)
            
            # Result labels
            self.pretension_result_label = tk.Label(main_frame, text="", fg="blue")
            self.pretension_result_label.pack(pady=5)
            self.cof_result_label = tk.Label(main_frame, text="", fg="blue")
            self.cof_result_label.pack(pady=5)
    
    def perform_single_calculation(self):
        try:
            A = float(self.angle_entry.get())
            L = float(self.length_entry.get())
            M = float(self.torque_entry.get())
            E = float(self.young_modulus_entry.get()) * 1000
            bolt_type = self.bolt_type_var.get()
        except ValueError:
            messagebox.showerror("Error", "Invalid input values")
            return
            
        bolt = bolt_data[bolt_type]
        
        F = calculate_force(A, L, E, bolt)
        mu = calculate_coefficient_of_friction(F, M, bolt)
        
        self.pretension_result_label.config(text=f"Pretension Force (F): {F:.2f} N")
        self.cof_result_label.config(text=f"Coefficient of Friction (μ): {mu:.4f}")

def calculate_force(A, L, E, bolt):
    delta_L = (A * bolt["P"]) / 360
    F = (delta_L * bolt["S"] * E) / L
    return F

def calculate_coefficient_of_friction(F, M, bolt):
    def equation(mu):
        d2 = bolt["d2"]
        tau = bolt["tau"]
        dk = bolt["dk"]
        term1 = (d2 / 2) * math.tan(tau + math.atan(1.155 * mu))
        term2 = (mu * dk) / 2
        return M - F * (term1 + term2)
    
    mu_initial_guess = 0.4
    mu_solution, = fsolve(equation, mu_initial_guess)
    return mu_solution

if __name__ == "__main__":
    root = tk.Tk()
    root.title("Bolt Friction Calculator")
    root.geometry("500x600")
    app = BoltCalculator(root)
    root.mainloop()
