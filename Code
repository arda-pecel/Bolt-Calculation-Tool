import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, filedialog
import math
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

# Bolt constants for M6 and M8
bolt_data = {
    "M8": {
        "Dp": 13,
        "dp": 8,
        "ds": 7.78,
        "S": 36.6,
        "P": 1.25,
        "d2": 7.188e-3,
        "tau": 5.530e-2,
        "dk": 1.100e-2,
    },
    "M6": {
        "Dp": 10,
        "dp": 6,
        "ds": 4.77,
        "S": 20.1,
        "P": 1.0,
        "d2": 5.350e-3,
        "tau": 5.943e-2,
        "dk": 8.300e-3,
    },
}

class BoltCalculator:
    def __init__(self, root):
        self.root = root
        self.mode = None
        self.groups = None
        self.group_data = []
        self.results = []
        self.stats = {}
        self.overall_stats = {}
        self.setup_mode_selection()

    def setup_mode_selection(self):
        self.mode_window = tk.Toplevel(self.root)
        self.mode_window.title("Calculation Mode")
        self.mode_window.geometry("300x200")

        tk.Label(self.mode_window, text="Select Calculation Mode:").pack(pady=10)

        ttk.Button(self.mode_window, text="Single Calculation",
                   command=lambda: self.set_mode("single")).pack(pady=5)
        ttk.Button(self.mode_window, text="Group Test",
                   command=lambda: self.set_mode("group")).pack(pady=5)
        ttk.Button(self.mode_window, text="How It Works?",
                   command=self.show_help_documentation).pack(pady=5)

    def show_help_documentation(self):
        doc_window = tk.Toplevel(self.root)
        doc_window.title("Technical Documentation")
        doc_window.geometry("800x600")

        canvas = tk.Canvas(doc_window)
        scrollbar = ttk.Scrollbar(doc_window, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

        content = """
        Bolt Friction Calculator Technical Documentation

        1. Single Calculation Mode
        --------------------------
        Calculates adjusted pretension force (F_adj) and coefficient of friction (μ) 
        using initial (M1) and final torque (M2).

        Formulas:
        - Axial displacement: ΔL = (A * P) / 360
        - Pretension force: F = (ΔL * S * E) / L
        - Adjusted pretension: F_adj = F * (1 + M1/M2)
        - Coefficient of friction: T = 0.5 * ds * F * tan (tan^-1 (P / (π * ds) + tan^-1 (μ / cos(30))) + 0.25 * (Dp + dp) * F * μ
        which solves numerically

        2. Group Test Mode
        ------------------
        - Enter group names and samples for each group
        - Common torque values (M1 and M2) used for all samples
        - Results displayed with statistical analysis
        """

        ttk.Label(scrollable_frame, text=content, wraplength=700, justify="left").pack(padx=10, pady=10)
        scrollable_frame.update_idletasks()
        canvas.config(scrollregion=canvas.bbox("all"))

    def set_mode(self, mode):
        self.mode = mode
        self.mode_window.destroy()
        self.setup_main_ui()

    def setup_main_ui(self):
        self.main_window = tk.Toplevel(self.root)
        self.main_window.title("Input Parameters")

        self.bolt_type_var = tk.StringVar(value="M8")
        ttk.Label(self.main_window, text="Bolt Type:").grid(row=0, column=0, padx=5, pady=5)
        ttk.Radiobutton(self.main_window, text="M6", variable=self.bolt_type_var, value="M6").grid(row=0, column=1)
        ttk.Radiobutton(self.main_window, text="M8", variable=self.bolt_type_var, value="M8").grid(row=0, column=2)

        ttk.Label(self.main_window, text="Bolt Length (L) [mm]:").grid(row=1, column=0, padx=5, pady=5)
        self.length_entry = ttk.Entry(self.main_window)
        self.length_entry.grid(row=1, column=1, columnspan=2)

        ttk.Label(self.main_window, text="Young's Modulus (E) [GPa]:").grid(row=2, column=0, padx=5, pady=5)
        self.young_modulus_entry = ttk.Entry(self.main_window)
        self.young_modulus_entry.grid(row=2, column=1, columnspan=2)

        if self.mode == "single":
            ttk.Label(self.main_window, text="Rotation Angle (A) [degrees]:").grid(row=3, column=0, padx=5, pady=5)
            self.angle_entry = ttk.Entry(self.main_window)
            self.angle_entry.grid(row=3, column=1, columnspan=2)

        ttk.Label(self.main_window, text="Initial Torque (M1) [Nm]:").grid(row=4, column=0, padx=5, pady=5)
        self.m1_entry = ttk.Entry(self.main_window)
        self.m1_entry.grid(row=4, column=1, columnspan=2)

        ttk.Label(self.main_window, text="Final Torque (M2) [Nm]:").grid(row=5, column=0, padx=5, pady=5)
        self.m2_entry = ttk.Entry(self.main_window)
        self.m2_entry.grid(row=5, column=1, columnspan=2)

        ttk.Button(self.main_window, text="Calculate", command=self.validate_inputs).grid(row=6, column=0, columnspan=3, pady=10)

    def validate_inputs(self):
        try:
            self.L = float(self.length_entry.get())
            self.E = float(self.young_modulus_entry.get()) * 1000  # Convert GPa to MPa
            self.M1 = float(self.m1_entry.get())
            self.M2 = float(self.m2_entry.get())
            
            if self.mode == "single":
                self.A = float(self.angle_entry.get())
                self.perform_single_calculation()
            else:
                self.get_group_count()

        except ValueError:
            messagebox.showerror("Error", "Invalid input values")

    def get_group_count(self):
        self.groups = simpledialog.askinteger("Group Count", "Enter number of groups:", parent=self.main_window)
        if self.groups and self.groups > 0:
            self.get_group_details()

    def get_group_details(self):
        for i in range(self.groups):
            group_name = simpledialog.askstring(f"Group {i+1}", "Enter group name:", parent=self.main_window)
            sample_count = simpledialog.askinteger(f"Samples in {group_name}", "Number of samples:", parent=self.main_window)
            
            angles = []
            for j in range(sample_count):
                angle = simpledialog.askfloat(f"Sample {j+1}", f"Rotation angle for {group_name}:", parent=self.main_window)
                angles.append(angle)
            
            self.group_data.append((group_name, angles))
        
        self.perform_group_calculation()

    def perform_single_calculation(self):
        bolt = bolt_data[self.bolt_type_var.get()]
        F = calculate_force(self.A, self.L, self.E, bolt)
        adjusted_F = F * (1 + self.M1/self.M2)
        mu = calculate_coefficient_of_friction(adjusted_F, self.M2 - self.M1, bolt)
        
        result_window = tk.Toplevel(self.root)
        ttk.Label(result_window, text=f"Adjusted Pretension Force: {adjusted_F:.2f} N").pack(pady=5)
        ttk.Label(result_window, text=f"Coefficient of Friction: {mu:.4f}").pack(pady=5)

    def perform_group_calculation(self):
        bolt = bolt_data[self.bolt_type_var.get()]
        self.results = []
        
        for group_name, angles in self.group_data:
            for angle in angles:
                F = calculate_force(angle, self.L, self.E, bolt)
                adjusted_F = F * (1 + self.M1/self.M2)
                mu = calculate_coefficient_of_friction(adjusted_F, self.M2 - self.M1, bolt)
                self.results.append((group_name, angle, adjusted_F, mu))
        
        self.show_group_results()
    
    def show_group_results(self):
        result_window = tk.Toplevel(self.root)
        result_window.title("Group Test Results")
        result_window.geometry("1400x800")

        # Pencereyi iki panele bölelim
        paned = ttk.PanedWindow(result_window, orient=tk.HORIZONTAL)
        paned.pack(fill=tk.BOTH, expand=True)

        # Grafik paneli
        plot_frame = ttk.Frame(paned)
        paned.add(plot_frame, weight=3)

        # Tablo paneli
        table_frame = ttk.Frame(paned)
        paned.add(table_frame, weight=2)

        # Grafik oluşturma
        fig = plt.figure(figsize=(10, 8))
        ax1 = fig.add_subplot(211)
        ax2 = fig.add_subplot(212)

        groups = list(set([r[0] for r in self.results]))
        x_positions = {group: i for i, group in enumerate(groups)}
        x_vals, y_force, y_cof = [], [], []

        for group, angle, force, mu in self.results:
            x = x_positions[group] + np.random.normal(0, 0.05)
            x_vals.append(x)
            y_force.append(force)
            y_cof.append(mu)

        ax1.scatter(x_vals, y_force, alpha=0.5)
        ax1.set_xticks(range(len(groups)))
        ax1.set_xticklabels(groups)
        ax1.set_title("Pretension Force by Group")
        ax1.set_ylabel("Force (N)")

        ax2.scatter(x_vals, y_cof, alpha=0.5)
        ax2.set_xticks(range(len(groups)))
        ax2.set_xticklabels(groups)
        ax2.set_title("Coefficient of Friction by Group")
        ax2.set_ylabel("Coefficient of Friction")

        canvas = FigureCanvasTkAgg(fig, master=plot_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

        # Tablo oluşturma
        columns = ("Group", "Angle (°)", "Pretension (N)", "CoF (μ)")
        tree = ttk.Treeview(table_frame, columns=columns, show="headings")
        
        # Scrollbar ekleme
        vsb = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        hsb = ttk.Scrollbar(table_frame, orient="horizontal", command=tree.xview)
        tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)

        tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")

        # Sütun başlıkları
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100)

        # Verileri ve istatistikleri ekleme
        current_group = None
        group_data = {}
        
        # Grup istatistiklerini hesapla
        for group, angle, force, mu in self.results:
            if group not in group_data:
                group_data[group] = {
                    'angles': [],
                    'forces': [],
                    'cofs': []
                }
            group_data[group]['angles'].append(angle)
            group_data[group]['forces'].append(force)
            group_data[group]['cofs'].append(mu)
            
            tree.insert("", "end", values=(
                group,
                f"{angle:.2f}",
                f"{force:.2f}",
                f"{mu:.4f}"
            ))

        # Grup istatistiklerini ekle
        for group in group_data:
            # Ortalama
            tree.insert("", "end", values=(
                f"{group} - Avg",
                f"{np.mean(group_data[group]['angles']):.2f}",
                f"{np.mean(group_data[group]['forces']):.2f}",
                f"{np.mean(group_data[group]['cofs']):.4f}"
            ), tags=('stats',))
            
            # Max
            tree.insert("", "end", values=(
                f"{group} - Max",
                f"{np.max(group_data[group]['angles']):.2f}",
                f"{np.max(group_data[group]['forces']):.2f}",
                f"{np.max(group_data[group]['cofs']):.4f}"
            ), tags=('stats',))
            
            # Min
            tree.insert("", "end", values=(
                f"{group} - Min",
                f"{np.min(group_data[group]['angles']):.2f}",
                f"{np.min(group_data[group]['forces']):.2f}",
                f"{np.min(group_data[group]['cofs']):.4f}"
            ), tags=('stats',))

        # Genel istatistikler
        all_angles = [r[1] for r in self.results]
        all_forces = [r[2] for r in self.results]
        all_cofs = [r[3] for r in self.results]
        
        tree.insert("", "end", values=("Overall - Avg", 
                     f"{np.mean(all_angles):.2f}", 
                     f"{np.mean(all_forces):.2f}", 
                     f"{np.mean(all_cofs):.4f}"), tags=('overall',))
        tree.insert("", "end", values=("Overall - Max", 
                     f"{np.max(all_angles):.2f}", 
                     f"{np.max(all_forces):.2f}", 
                     f"{np.max(all_cofs):.4f}"), tags=('overall',))
        tree.insert("", "end", values=("Overall - Min", 
                     f"{np.min(all_angles):.2f}", 
                     f"{np.min(all_forces):.2f}", 
                     f"{np.min(all_cofs):.4f}"), tags=('overall',))

        # Stil ayarları
        tree.tag_configure('stats', background='#f0f0f0')
        tree.tag_configure('overall', background='#e0e0ff')

        # Export butonu
        ttk.Button(table_frame, text="Export Data", command=self.export_data).grid(row=2, column=0, columnspan=2, pady=10)

    def export_data(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if not file_path:
            return

        with open(file_path, 'w') as f:
            # Başlık
            f.write("Group,Angle (°),Pretension (N),CoF (μ)\n")
            
            # Veriler
            for group, angle, force, mu in self.results:
                f.write(f"{group},{angle:.2f},{force:.2f},{mu:.4f}\n")
            
            # İstatistikler
            f.write("\nGroup Statistics\n")
            groups = list(set([r[0] for r in self.results]))
            for group in groups:
                group_results = [r for r in self.results if r[0] == group]
                angles = [r[1] for r in group_results]
                forces = [r[2] for r in group_results]
                cofs = [r[3] for r in group_results]
                
                f.write(f"{group} - Avg,,{np.mean(forces):.2f},{np.mean(cofs):.4f}\n")
                f.write(f"{group} - Max,,{np.max(forces):.2f},{np.max(cofs):.4f}\n")
                f.write(f"{group} - Min,,{np.min(forces):.2f},{np.min(cofs):.4f}\n")
            
            # Genel istatistikler
            f.write("\nOverall Statistics\n")
            all_forces = [r[2] for r in self.results]
            all_cofs = [r[3] for r in self.results]
            f.write(f"Overall - Avg,,{np.mean(all_forces):.2f},{np.mean(all_cofs):.4f}\n")
            f.write(f"Overall - Max,,{np.max(all_forces):.2f},{np.max(all_cofs):.4f}\n")
            f.write(f"Overall - Min,,{np.min(all_forces):.2f},{np.min(all_cofs):.4f}\n")

def calculate_force(A, L, E, bolt):
    delta_L = (A * bolt["P"]) / 360
    return (delta_L * bolt["S"] * E) / L

def calculate_coefficient_of_friction(F, M, bolt):
    def equation(mu):
        term1 = (bolt["d2"]/2) * math.tan(bolt["tau"] + math.atan(1.155 * mu))
        term2 = (mu * bolt["dk"]) / 2
        return M - F * (term1 + term2)
    return fsolve(equation, 0.4)[0]

if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    app = BoltCalculator(root)
    root.mainloop()
